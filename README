#############################################
MANUAL DO JOGO PEDRA PAPEL TESOURA! 
#############################################

Requisitos:

Sistema operacional: Linux
Compilador C++: GCC (recomendado)
Bibliotecas: iostream, semaphore.h, thread, string

#############################################

Funcionamento:

O jogo é composto por duas threads, representando os jogadores (Jogador 1 e Jogador 2), e utiliza semáforos para garantir que as jogadas aconteçam de forma sincronizada e ordenada.

Regras do Jogo:
Cada jogador deve escolher entre as opções: Pedra, Papel ou Tesoura.
O vencedor é determinado pelas regras tradicionais:
Pedra vence Tesoura.
Tesoura vence Papel.
Papel vence Pedra.
O jogo termina se qualquer jogador digitar "Sair".
Caso a entrada seja inválida, o jogador será solicitado a escolher novamente.

#####################################################
Estrutura do Jogo:

Semáforos:
Os semáforos garantem a sincronização entre os jogadores, controlando quem pode fazer sua jogada em cada momento:

player1_ready:

Inicia com valor 1 (liberado), permitindo que o Jogador 1 jogue primeiro.
Após o Jogador 1 fazer sua escolha, bloqueia sua thread e libera o Jogador 2.
player2_ready:

Inicia com valor 0 (bloqueado), forçando o Jogador 2 a esperar pela jogada do Jogador 1.
Após o Jogador 2 fazer sua escolha, bloqueia sua thread e inicia o cálculo do vencedor.
choices_done:

Sincroniza o cálculo do vencedor e prepara a próxima rodada após ambos os jogadores realizarem suas jogadas.
Threads:
Cada jogador é representado por uma thread, que captura a entrada e valida a jogada:

Thread do Jogador 1 (player1): Captura e valida a escolha do Jogador 1, passando o controle para o Jogador 2.
Thread do Jogador 2 (player2): Captura e valida a escolha do Jogador 2, liberando o fluxo para calcular o vencedor.
####################################################
Funções principais:

is_valid_choice(): Valida se a escolha do jogador é uma das opções permitidas: Pedra, Papel, Tesoura ou Sair.
determine_winner(): Determina o vencedor da rodada com base nas escolhas.
clear_screen(): Limpa o terminal para ocultar as escolhas dos jogadores.
game_loop(): Controla o fluxo principal do jogo e reinicia as rodadas até que alguém digite "Sair".

#####################################################

Controle de Rodadas:

Após cada rodada, os jogadores são liberados para iniciar uma nova jogada pressionando Enter.
O fluxo do jogo retorna automaticamente ao início, garantindo a continuidade até que "Sair" seja digitado.

###################################################################################
COMO COMPILAR E RODAR? 

Certifique-se de que o GCC está instalado no seu sistema.

Clone o repositório do jogo com: git clone https://github.com/KatielyLacerda/Jogo-de-Sistemas-Operacionais.git  

Entre no diretório do jogo: cd jogo-de-Sistemas-Operacionais

Compile o código: g++ -std=c++11 main.cpp -o jogo -pthread 

Execute o jogo: ./jogo

JOGAR NO WINDOWS:

Certifique-se que seu gcc suporta threads... guia de instalação do MinGW-w64: https://code.visualstudio.com/docs/cpp/config-mingw

compile o código g++ -std=c++11 main_windows.cpp -o jogo -pthread 

Execute o jogo: ./jogo

###################################
AGORA É SÓ JOGAR!
###################################

###################################################################################
Resumo:

Os semáforos foram usados para evitar condições de corrida, garantindo que as escolhas dos jogadores sejam feitas em ordem.
As threads permitem capturar entradas simultâneas, com cada jogador jogando em sua própria thread de forma sincronizada.



OBSERVAÇÃO IMPORTANTE: Se você não tivero gcc intalado na sua máquina pode baixar o repositório normalmente, criar um arquivo .cpp no Replit 'https://replit.com/' (Compilador online, que é só entrar com sua conta do google), e colar o código do main.cpp do respsirório no arquivo .cpp criado nele. Feito isso é só clicar em run que ele compila e executa automático. 
