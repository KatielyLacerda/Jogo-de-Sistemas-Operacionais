#############################################
MANUAL DO JOGO PEDRA PAPEL TESOURA!
#############################################

Requisitos nio Linux:

Um terminal que suporte ANSI escape codes
Compilador C++: GCC
Bibliotecas: iostream, semaphore.h, thread, string

#############################################

Funcionamento:

O jogo é composto por duas threads, representando os jogadores (Jogador 1 e Jogador 2), e utiliza semáforos para garantir que as jogadas aconteçam de forma sincronizada e ordenada.

Regras do Jogo:
Cada jogador deve escolher entre as opções: Pedra, Papel ou Tesoura.
O vencedor é determinado pelas regras tradicionais:
Pedra vence Tesoura.
Tesoura vence Papel.
Papel vence Pedra.
O jogo termina se qualquer jogador digitar "Sair".
Caso a entrada seja inválida, o jogador será solicitado a escolher novamente.

#####################################################
Estrutura do Jogo em LINUX:

Semáforos:
São usados para controlar a sincronização entre as threads dos jogadores, garantindo que as jogadas sejam feitas na ordem correta. Os semáforos usados são:

player1_ready:
Inicia com valor 1 (liberado), permitindo que o Jogador 1 jogue primeiro.
Após a escolha do Jogador 1, ele bloqueia sua thread e libera o Jogador 2 para fazer a jogada.
player2_ready:
Inicia com valor 0 (bloqueado), forçando o Jogador 2 a esperar até que o Jogador 1 faça sua escolha.
Após a escolha do Jogador 2, ele bloqueia sua thread e a thread do Jogador 1 pode ser liberada para uma nova rodada.
choices_done:
Usado para sincronizar o cálculo do vencedor e preparar a próxima rodada. Esse semáforo garante que ambos os jogadores façam suas jogadas antes de determinar o vencedor.

Threads:
Thread do Jogador 1 (player1):
Captura e valida a escolha do Jogador 1.
Após sua jogada, a thread do Jogador 1 é bloqueada até que o Jogador 2 faça sua jogada.
Thread do Jogador 2 (player2):
Captura e valida a escolha do Jogador 2.
Após sua jogada, libera o fluxo para calcular o vencedor.

####################################################
Funções principais:

is_valid_choice(): Valida se a escolha do jogador é uma das opções permitidas: Pedra, Papel, Tesoura ou Sair.
determine_winner(): Determina o vencedor da rodada com base nas escolhas.
clear_screen(): Limpa o terminal para ocultar as escolhas dos jogadores.
game_loop(): Controla o fluxo principal do jogo e reinicia as rodadas até que alguém digite "Sair".

#####################################################

Controle de Rodadas:

Após cada rodada, os jogadores são liberados para iniciar uma nova jogada pressionando Enter.
O fluxo do jogo retorna automaticamente ao início, garantindo a continuidade até que "Sair" seja digitado.
As escolhas dos jogadores são sincronizadas com os semáforos, garantindo que ambas as jogadas ocorram em ordem e sem conflitos.

###################################################################################
Requisitos no windows:
Um terminal que suporte ANSI escape codes
Compilador C++: GCC, GBD+10
Bibliotecas: iostream, semaphore.h, thread, string
Certifique-se que seu gcc suporta threads... guia de instalação do MinGW-w64: https://code.visualstudio.com/docs/cpp/config-mingw

Funcionamento:

Estrutura do Jogo em WINDOWS:

ESTRUTURA DO JOGO EM WINDOWS:

Funções principais:

Controle de Rodadas:

###################################################################################

COMO COMPILAR E RODAR em LINUX?

Certifique-se de que o GCC está instalado no seu sistema e numa versão atualizada.

Clone o repositório do jogo com: git clone https://github.com/KatielyLacerda/Jogo-de-Sistemas-Operacionais.git

Entre no diretório do jogo: cd jogo-de-Sistemas-Operacionais

Compile o código: g++ -std=c++11 main_linux.cpp -o jogo -pthread

Execute o jogo: ./jogo

COMO COMPLILAR E RODAR NO WINDOWS:

compile o código g++ -std=c++11 main_windows.cpp -o jogo -pthread

Execute o jogo: ./jogo

###################################
AGORA É SÓ JOGAR!
###################################

###################################################################################
Resumo:

Os Semáforos foram usados para sincronizar as jogadas, evitando que os jogadores façam escolhas simultâneas e garantindo que as threads dos jogadores sejam coordenadas.

Threads permitem que as jogadas dos dois jogadores ocorram em paralelo, mas de forma sincronizada, respeitando a ordem correta do jogo.

OBSERVAÇÃO IMPORTANTE: Se você não tivero gcc intalado na sua máquina pode baixar o repositório normalmente, criar um arquivo .cpp no Replit 'https://replit.com/' (Compilador online, que é só entrar com sua conta do google), e colar o código do main.cpp do respsirório no arquivo .cpp criado nele. Feito isso é só clicar em run que ele compila e executa automático.
